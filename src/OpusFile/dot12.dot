digraph {
    0 [label=0];
    1 [label=1];
    2 [label=2];
    3 [label=3];
    4 [label=4];
    5 [label=5];
    6 [label=6];
    7 [label=7];
    8 [label=8];
    9 [label=9];
    10 [label=10];
    11 [label=11];
    12 [label=12];
    13 [label=13];
    14 [label=14];
    15 [label=15];
    16 [label=16];
    17 [label=17];
    18 [label=18];
    19 [label=19];
    20 [label=20];
    21 [label=21];
    22 [label=22];
    23 [label=23];
    24 [label=24];
    25 [label=25];
    26 [label=26];
    0 -> 1 [label="<update b0 = Anything>"];
    1 -> 2 [label="<c1 = new_file_bytes(b0)>"];
    2 -> 3 [label="<p2 = new_c_string(c1)>"];
    3 -> 4 [label="<p3 = malloc()>"];
    4 -> 5 [label="<p4 = op_test_file(p2, p3)>"];
    5 -> 7 [label="<b5 = is_null_ptr(p4)>"];
    6 -> 8 [label="<c6 = op_test_open(p4)>"];
    6 -> 14 [label="<i6 = op_pcm_total(p4, -1)>"];
    7 -> 6 [label="<if !b5>"];
    8 -> 10 [label="<b7 = c6 == 0>"];
    9 -> 11 [label="<c8 = op_channel_count(p4, -1)>"];
    10 -> 9 [label="<assert b7>"];
    11 -> 12 [label="<assert ((2 == c8) || (3 == c8))>"];
    12 -> 13 [label="<u9 = op_free(p4)>"];
    14 -> 15 [label="<c7 = op_channel_count(p4, -1)>"];
    15 -> 16 [label="<update i8 = (((i6 * (c7 as int)) * 2) as int)>"];
    16 -> 17 [label="<p9 = malloc_bytes(i8)>"];
    17 -> 18 [label="<update i10 = 0>"];
    18 -> 19 [label="<if (i10 == i6)>"];
    18 -> 20 [label="<if !(i10 == i6)>"];
    19 -> 21 [label="<c11 = op_read(p4, p9, ((i6 * (c7 as int)) as int), NULL)>"];
    20 -> 22 [label="<u13 = op_free(p4)>"];
    21 -> 23 [label="<if (c11 >= 0)>"];
    23 -> 24 [label="<update i10 = (i10 + (c11 as int))>"];
    24 -> 25 [label="<p12 = plus_ptr(p9, (((c11 as int) * (c7 as int)) * (2 as int)))>"];
    25 -> 26 [label="<update p9 = p12>"];
    26 -> 18 [label="<redir>"];
}
